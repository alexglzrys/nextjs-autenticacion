import Head from "next/head";
import Image from "next/image";
import { getSession, signOut } from "next-auth/react";

export default function Home({ user }) {
  
  const handlerLogout = async(e) => {
    // Next Auth cuenta con funciones preconstruidas para realizar diferentes acciones relacionadas con la autenticación
    // Sin que sea necesario lanzar peticiones HTTP a su respectiva Rest API
    await signOut()
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <header className="header">
          <button className="logout" onClick={handlerLogout}>Cerrar Sesión</button>
          <figure className="avatar">
            <Image
              src={user.image}
              alt={user.name}
              width={60}
              height={60}
              className="avatar__image"
            />
            <figcaption className="avatar__info">
              <h5 className="avatar__name">{user.name}</h5>
              <p className="avatar__email">{user.email}</p>
            </figcaption>
          </figure>
        </header>
      </main>
    </>
  );
}

export const getServerSideProps = async (context) => {
  // Recuperar información almacenada en la Sessión desde el Backend
  // Recuperar la sessión desde el Backend evita que se vea por completo el contenido interno de la página
  // Si recuperarmos la sessión dede el Frontend, es posible que se visualice por un momento parte del contenido de la página (skeleton o información sensible) y luego redireccione
  const session = await getSession(context);

  // En caso de no existir la sessión, redireccionamos a otra página
  if (!session) return {
    redirect: {
      destination: '/login',
      permanent: false
    }
  }

  // Si todo es correcto hidrato la página con la información de la sessión
  return {
    props: {
      user: session.user,
    },
  };
};
